# Stubs for logging (Python 3.4)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Undefined, Any

CRITICAL = Undefined(Any)
FATAL = Undefined(Any)
ERROR = Undefined(Any)
WARNING = Undefined(Any)
WARN = Undefined(Any)
INFO = Undefined(Any)
DEBUG = Undefined(Any)
NOTSET = Undefined(Any)

def getLevelName(level): pass
def addLevelName(level, levelName): pass

class LogRecord:
    name = Undefined(Any)
    msg = Undefined(Any)
    args = Undefined(Any)
    levelname = Undefined(Any)
    levelno = Undefined(Any)
    pathname = Undefined(Any)
    filename = Undefined(Any)
    module = Undefined(Any)
    exc_info = Undefined(Any)
    exc_text = Undefined(Any)
    stack_info = Undefined(Any)
    lineno = Undefined(Any)
    funcName = Undefined(Any)
    created = Undefined(Any)
    msecs = Undefined(Any)
    relativeCreated = Undefined(Any)
    thread = Undefined(Any)
    threadName = Undefined(Any)
    processName = Undefined(Any)
    process = Undefined(Any)
    def __init__(self, name, level, pathname, lineno, msg, args, exc_info, func=None, sinfo=None,
                 **kwargs): pass
    def getMessage(self): pass

def setLogRecordFactory(factory): pass
def getLogRecordFactory(): pass
def makeLogRecord(dict): pass

class PercentStyle:
    default_format = Undefined(Any)
    asctime_format = Undefined(Any)
    asctime_search = Undefined(Any)
    def __init__(self, fmt): pass
    def usesTime(self): pass
    def format(self, record): pass

class StrFormatStyle(PercentStyle):
    default_format = Undefined(Any)
    asctime_format = Undefined(Any)
    asctime_search = Undefined(Any)
    def format(self, record): pass

class StringTemplateStyle(PercentStyle):
    default_format = Undefined(Any)
    asctime_format = Undefined(Any)
    asctime_search = Undefined(Any)
    def __init__(self, fmt): pass
    def usesTime(self): pass
    def format(self, record): pass

BASIC_FORMAT = Undefined(Any)

class Formatter:
    converter = Undefined(Any)
    datefmt = Undefined(Any)
    def __init__(self, fmt=None, datefmt=None, style=''): pass
    default_time_format = Undefined(Any)
    default_msec_format = Undefined(Any)
    def formatTime(self, record, datefmt=None): pass
    def formatException(self, ei): pass
    def usesTime(self): pass
    def formatMessage(self, record): pass
    def formatStack(self, stack_info): pass
    def format(self, record): pass

class BufferingFormatter:
    linefmt = Undefined(Any)
    def __init__(self, linefmt=None): pass
    def formatHeader(self, records): pass
    def formatFooter(self, records): pass
    def format(self, records): pass

class Filter:
    name = Undefined(Any)
    nlen = Undefined(Any)
    def __init__(self, name=''): pass
    def filter(self, record): pass

class Filterer:
    filters = Undefined(Any)
    def __init__(self): pass
    def addFilter(self, filter): pass
    def removeFilter(self, filter): pass
    def filter(self, record): pass

class Handler(Filterer):
    level = Undefined(Any)
    formatter = Undefined(Any)
    def __init__(self, level=Undefined): pass
    def get_name(self): pass
    def set_name(self, name): pass
    name = Undefined(Any)
    lock = Undefined(Any)
    def createLock(self): pass
    def acquire(self): pass
    def release(self): pass
    def setLevel(self, level): pass
    def format(self, record): pass
    def emit(self, record): pass
    def handle(self, record): pass
    def setFormatter(self, fmt): pass
    def flush(self): pass
    def close(self): pass
    def handleError(self, record): pass

class StreamHandler(Handler):
    terminator = Undefined(Any)
    stream = Undefined(Any)
    def __init__(self, stream=None): pass
    def flush(self): pass
    def emit(self, record): pass

class FileHandler(StreamHandler):
    baseFilename = Undefined(Any)
    mode = Undefined(Any)
    encoding = Undefined(Any)
    delay = Undefined(Any)
    stream = Undefined(Any)
    def __init__(self, filename, mode='', encoding=None, delay=False): pass
    def close(self): pass
    def emit(self, record): pass

class _StderrHandler(StreamHandler):
    def __init__(self, level=Undefined): pass

lastResort = Undefined(Any)

class PlaceHolder:
    loggerMap = Undefined(Any)
    def __init__(self, alogger): pass
    def append(self, alogger): pass

def setLoggerClass(klass): pass
def getLoggerClass(): pass

class Manager:
    root = Undefined(Any)
    disable = Undefined(Any)
    emittedNoHandlerWarning = Undefined(Any)
    loggerDict = Undefined(Any)
    loggerClass = Undefined(Any)
    logRecordFactory = Undefined(Any)
    def __init__(self, rootnode): pass
    def getLogger(self, name): pass
    def setLoggerClass(self, klass): pass
    def setLogRecordFactory(self, factory): pass

class Logger(Filterer):
    name = Undefined(Any)
    level = Undefined(Any)
    parent = Undefined(Any)
    propagate = Undefined(Any)
    handlers = Undefined(Any)
    disabled = Undefined(Any)
    def __init__(self, name, level=Undefined): pass
    def setLevel(self, level): pass
    def debug(self, msg, *args, **kwargs): pass
    def info(self, msg, *args, **kwargs): pass
    def warning(self, msg, *args, **kwargs): pass
    def warn(self, msg, *args, **kwargs): pass
    def error(self, msg, *args, **kwargs): pass
    def exception(self, msg, *args, **kwargs): pass
    def critical(self, msg, *args, **kwargs): pass
    fatal = Undefined(Any)
    def log(self, level, msg, *args, **kwargs): pass
    def findCaller(self, stack_info=False): pass
    def makeRecord(self, name, level, fn, lno, msg, args, exc_info, func=None, extra=None,
                   sinfo=None): pass
    def handle(self, record): pass
    def addHandler(self, hdlr): pass
    def removeHandler(self, hdlr): pass
    def hasHandlers(self): pass
    def callHandlers(self, record): pass
    def getEffectiveLevel(self): pass
    def isEnabledFor(self, level): pass
    def getChild(self, suffix): pass

class RootLogger(Logger):
    def __init__(self, level): pass

class LoggerAdapter:
    logger = Undefined(Any)
    extra = Undefined(Any)
    def __init__(self, logger, extra): pass
    def process(self, msg, kwargs): pass
    def debug(self, msg, *args, **kwargs): pass
    def info(self, msg, *args, **kwargs): pass
    def warning(self, msg, *args, **kwargs): pass
    def warn(self, msg, *args, **kwargs): pass
    def error(self, msg, *args, **kwargs): pass
    def exception(self, msg, *args, **kwargs): pass
    def critical(self, msg, *args, **kwargs): pass
    def log(self, level, msg, *args, **kwargs): pass
    def isEnabledFor(self, level): pass
    def setLevel(self, level): pass
    def getEffectiveLevel(self): pass
    def hasHandlers(self): pass

def basicConfig(**kwargs): pass
def getLogger(name=None): pass
def critical(msg, *args, **kwargs): pass

fatal = Undefined(Any)

def error(msg, *args, **kwargs): pass
def exception(msg, *args, **kwargs): pass
def warning(msg, *args, **kwargs): pass
def warn(msg, *args, **kwargs): pass
def info(msg, *args, **kwargs): pass
def debug(msg, *args, **kwargs): pass
def log(level, msg, *args, **kwargs): pass
def disable(level): pass

class NullHandler(Handler):
    def handle(self, record): pass
    def emit(self, record): pass
    lock = Undefined(Any)
    def createLock(self): pass

def captureWarnings(capture): pass
