# Stubs for xml.etree.ElementTree (Python 3.4)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Undefined, Any
import io

VERSION = Undefined(Any)

class ParseError(SyntaxError): pass

def iselement(element): pass

class Element:
    def __init__(self, tag, attrib=Undefined, **extra): pass
    def append(self, *args, **kwargs): pass
    def clear(self, *args, **kwargs): pass
    def extend(self, *args, **kwargs): pass
    def find(self, *args, **kwargs): pass
    def findall(self, *args, **kwargs): pass
    def findtext(self, match, default=Undefined, namespaces=Undefined): pass
    def get(self, *args, **kwargs): pass
    def getchildren(self): pass
    def getiterator(self, tag=Undefined): pass
    def insert(self, *args, **kwargs): pass
    def items(self, *args, **kwargs): pass
    def iter(self, *args, **kwargs): pass
    def iterfind(self, match, namespaces=Undefined): pass
    def itertext(self): pass
    def keys(self): pass
    def makeelement(self, tag, attrib): pass
    def remove(self, *args, **kwargs): pass
    def set(self, *args, **kwargs): pass
    def __copy__(self): pass
    def __deepcopy__(self): pass
    def __delattr__(self, name): pass
    def __delitem__(self, name): pass
    def __getitem__(self, name): pass
    def __getstate__(self): pass
    def __len__(self): pass
    def __setattr__(self, name, value): pass
    def __setitem__(self, index, object): pass
    def __setstate__(self, state): pass
    def __sizeof__(self): pass

def SubElement(parent, tag, attrib=Undefined, **extra): pass
def Comment(text=None): pass
def ProcessingInstruction(target, text=None): pass

PI = Undefined(Any)

class QName:
    text = Undefined(Any)
    def __init__(self, text_or_uri, tag=None): pass
    def __hash__(self): pass
    def __le__(self, other): pass
    def __lt__(self, other): pass
    def __ge__(self, other): pass
    def __gt__(self, other): pass
    def __eq__(self, other): pass
    def __ne__(self, other): pass

class ElementTree:
    def __init__(self, element=None, file=None): pass
    def getroot(self): pass
    def parse(self, source, parser=None): pass
    def iter(self, tag=None): pass
    def getiterator(self, tag=None): pass
    def find(self, path, namespaces=None): pass
    def findtext(self, path, default=None, namespaces=None): pass
    def findall(self, path, namespaces=None): pass
    def iterfind(self, path, namespaces=None): pass
    def write(self, file_or_filename, encoding=None, xml_declaration=None, default_namespace=None, method=None, *, short_empty_elements=True): pass
    def write_c14n(self, file): pass

def register_namespace(prefix, uri): pass
def tostring(element, encoding=None, method=None, *, short_empty_elements=True): pass

class _ListDataStream(io.BufferedIOBase):
    lst = Undefined(Any)
    def __init__(self, lst): pass
    def writable(self): pass
    def seekable(self): pass
    def write(self, b): pass
    def tell(self): pass

def tostringlist(element, encoding=None, method=None, *, short_empty_elements=True): pass
def dump(elem): pass
def parse(source, parser=None): pass
def iterparse(source, events=None, parser=None): pass

class XMLPullParser:
    def __init__(self, events=None, *, _parser=None): pass
    def feed(self, data): pass
    def close(self): pass
    def read_events(self): pass

class _IterParseIterator:
    root = Undefined(Any)
    def __init__(self, source, events, parser, close_source=False): pass
    def __next__(self): pass
    def __iter__(self): pass

def XML(text, parser=None): pass
def XMLID(text, parser=None): pass

fromstring = Undefined(Any)

def fromstringlist(sequence, parser=None): pass

class TreeBuilder:
    def __init__(self, element_factory=None): pass
    def close(self): pass
    def data(self, data): pass
    def start(self, tag, attrs): pass
    def end(self, tag): pass

class XMLParser:
    target = Undefined(Any)
    entity = Undefined(Any)
    version = Undefined(Any)
    def __init__(self, html=Undefined, target=Undefined, encoding=Undefined): pass
    def _parse_whole(self, *args, **kwargs): pass
    def _setevents(self, *args, **kwargs): pass
    def close(self, *args, **kwargs): pass
    def doctype(self, name, pubid, system): pass
    def feed(self, data): pass
